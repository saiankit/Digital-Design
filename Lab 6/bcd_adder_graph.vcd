$date
	Mon Oct  5 12:42:12 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module bcd_adder_tb $end
$var wire 4 ! s [3:0] $end
$var wire 1 " c $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$scope module dut $end
$var wire 1 % Carry $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 ( w2 $end
$var wire 4 ) sum1 [3:0] $end
$var wire 4 * s [3:0] $end
$var wire 1 + carry1 $end
$var wire 4 , car [3:0] $end
$var wire 1 " c $end
$scope module adder1 $end
$var wire 4 - a [3:0] $end
$var wire 4 . b [3:0] $end
$var wire 4 / s [3:0] $end
$var wire 1 + c $end
$upscope $end
$scope module adder2 $end
$var wire 4 0 a [3:0] $end
$var wire 4 1 b [3:0] $end
$var wire 4 2 s [3:0] $end
$var wire 1 " c $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
0+
b0 *
b0 )
0(
b0 '
b0 &
0%
b0 $
b0 #
0"
b0 !
$end
#10
b10 !
b10 *
b10 2
b10 )
b10 /
b10 0
b1 $
b1 '
b1 .
b1 #
b1 &
b1 -
#20
b100 !
b100 *
b100 2
b100 )
b100 /
b100 0
b10 $
b10 '
b10 .
b10 #
b10 &
b10 -
#30
b110 !
b110 *
b110 2
b110 )
b110 /
b110 0
b11 $
b11 '
b11 .
b11 #
b11 &
b11 -
#40
b1000 !
b1000 *
b1000 2
b1000 )
b1000 /
b1000 0
b100 $
b100 '
b100 .
b100 #
b100 &
b100 -
#50
1"
b110 ,
b110 1
1%
1(
b0 !
b0 *
b0 2
b1010 )
b1010 /
b1010 0
b101 $
b101 '
b101 .
b101 #
b101 &
b101 -
#60
b10 !
b10 *
b10 2
b1100 )
b1100 /
b1100 0
b110 $
b110 '
b110 .
b110 #
b110 &
b110 -
#70
b100 !
b100 *
b100 2
b1110 )
b1110 /
b1110 0
b111 $
b111 '
b111 .
b111 #
b111 &
b111 -
#80
0(
b110 !
b110 *
b110 2
0"
1+
b0 )
b0 /
b0 0
b1000 $
b1000 '
b1000 .
b1000 #
b1000 &
b1000 -
#90
